plugins {
    id 'com.android.application'
    id 'com.jakewharton.butterknife'

    id 'kotlin-android'
//    id 'kotlin-android-extensions' //新版kotlin不再支持,故注释.
}

def version_name = rootProject.version_name
def version_code = rootProject.version_code
def custom_channel_code = "0" //自定义的标识渠道的编码.

android {
//    compileSdk 32 //为抽取变量,改为compileSdkVersion.
    compileSdkVersion "$COMPILE_SDK_VERSION"

    defaultConfig {
        applicationId "com.wcl.testdemo"
//        minSdk 21 //为抽取变量,改为minSdkVersion.
        minSdkVersion "$MIN_SDK_VERSION"
//        targetSdk 32 //为抽取变量,改为targetSdkVersion.
        targetSdkVersion "$TARGET_SDK_VERSION"
        versionName version_name //原:rootProject.ext.version_name
        versionCode version_code //原:rootProject.ext.version_code

//        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //[Native:关注点一]
        externalNativeBuild {
            cmake {
                cppFlags ""
                // 通过Rebuild后会在app > build > intermediates > cmake > debug > obj目录下会生成不同CPU架构对应的so文件.
                // ndk（v17及以上）:only Supported ABIs are [armeabi-v7a, arm64-v8a, x86, x86_64]. 不填abiFilters默认cmake生成前面四种架构种类的so.
                // 注意abiFilter和abiFilters的区别.
                abiFilters 'armeabi-v7a' //"x86", "x86_64", 'arm64-v8a'
                //arguments "-DANDROID_PLATFORM=24","-DANDROID_TOOLCHAIN=clang" /可以修改cmake的"build_command.txt"编译命令的参数.
                arguments "-DANDROID_STL=c++_shared"//OpenCV需要用到c++_shared.so,本地没有,声明远程下载一个.
            }
        }

        //[Native:关注点二]
        ndk {
            // 在可运行项目的build.gradle中的android->defaultConfig->ndk下:
            // 设置abiFilters表示支持的SO库架构种类,限制了cmake生成so架构种类的上限,也决定了APK中lib文件夹下so架构种类的上限.
            // 注意abiFilter和abiFilters的区别.
            abiFilters 'armeabi-v7a' //'armeabi', 'x86', 'armeabi-v7a', 'arm64-v8a', 'x86_64', 'arm64-v8a', "mips", "mips64"
        }

        //为AndroidManifest设置占位符,在其中使用方式如: ${JPUSH_PKGNAME}
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "a3071cc65520be5beb752870", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
//                MEIZU_APPKEY  : "MZ-魅族的APPKEY",
//                MEIZU_APPID   : "MZ-魅族的APPID",
//                XIAOMI_APPID  : "MI-小米的APPID",
//                XIAOMI_APPKEY : "MI-小米的APPKEY",
//                OPPO_APPKEY   : "OP-oppo的APPKEY",
//                OPPO_APPID    : "OP-oppo的APPID",
//                OPPO_APPSECRET: "OP-oppo的APPSECRET",
//                VIVO_APPKEY   : "vivo的APPKEY",
//                VIVO_APPID    : "vivo的APPID",
//                HONOR_APPID   : "Honor的APP ID"
        ]
        buildConfigField 'int', 'CUSTOM_CHANNEL_CODE', custom_channel_code //在"BuildConfig.java"中构建静态常量.
    }

    //[Native:关注点三]
    externalNativeBuild {//有此项表示Native(C/C++)工程,编译会慢很多(不调试Native时可注释此项和调用处).无此项表示Java工程.
        cmake {
            path "src/main/cpp/CMakeLists.txt" //指定CMakeLists.txt文件源路径(相对本gradle文件的路径).
            version "3.10.2"
        }
    }

    //[Native:关注点四]
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/cpp/libs'] //指定native层中需要用到的三方so路径(相对本gradle文件的路径),以供引入apk.
            res.srcDirs = ['src/main/res', 'src/main/res-black'] //将换肤资源以"增加后缀"方式命名后,单独放到一个res目录,最后在此将该res目录声明到资源目录列表中.(个人规范,仅为方便管理)
        }
    }

    signingConfigs {
        debug {
            storeFile file('../wei.jks')
            storePassword 'weichunle'
            keyAlias 'weichunle'
            keyPassword 'weichunle'
        }
        release {
            storeFile file('../wei.jks')
            storePassword 'weichunle'
            keyAlias 'weichunle'
            keyPassword 'weichunle'
        }
        wei {
            storeFile file('../wei.jks')
            storePassword 'weichunle'
            keyAlias 'weichunle'
            keyPassword 'weichunle'
        }
    }

    buildTypes {
        release {
            buildConfigField("boolean", "LOG_DEBUG", "false") //在"BuildConfig.java"中构建静态常量.
            debuggable false //默认false,表示APK运行时,不可以在AS端Logcat通过[进程名]来筛选查看指定进程的日志.
            minifyEnabled false //是否开启混淆.
            zipAlignEnabled false //是否压缩优化.
            shrinkResources false  //是否移出无用资源.
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro' //默认的混淆文件以及我们指定的混淆文件.
            signingConfig signingConfigs.wei //签名配置通过signingConfigs中的wei来签名.
        }
        debug {
            buildConfigField("boolean", "LOG_DEBUG", "true") //在"BuildConfig.java"中构建静态常量.
            debuggable true //默认true,表示APK运行时,可以在AS端Logcat通过[进程名]来筛选查看指定进程的日志.
            minifyEnabled false //是否开启混淆.
            zipAlignEnabled false //是否压缩优化.
            shrinkResources false  //是否移出无用资源.
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro' //默认的混淆文件以及我们指定的混淆文件.
            signingConfig signingConfigs.wei //签名配置通过signingConfigs中的wei来签名.
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])

    implementation project(":testCreateJarlibrary")

    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.4.0'
//    testImplementation 'junit:junit:4.13.2'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'//约束布局.
    implementation 'com.jakewharton:butterknife:10.2.3'//黄油刀(8.4.0以上版本,该库会使用androidx.如果我的其他库使用support,会冲突使得项目无法build).
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'//黄油刀.

    implementation 'com.blankj:utilcodex:1.31.0'//布兰柯基-工具类(如果用了AndroidX,引入utilcodex否则引入utilcode)
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'//WebSocket.

    implementation "androidx.camera:camera-core:1.0.0-alpha05"
    implementation "androidx.camera:camera-camera2:1.0.0-alpha05"

    //极光推送相关(https://docs.jiguang.cn/jpush/quickstart/Android_quick):本次仅接入极光渠道,未接入其他厂商通道.
    implementation 'cn.jiguang.sdk:jpush:5.2.0'// 此处以JPush 5.0.0 版本为例，5.0.0 版本开始可以自动拉取 JCore 包，无需另外配置.
    //极光厂商插件版本与接入JPush版本保持一致,下同.若不集成厂商通道,可直接跳过以下依赖(不接入厂商通道时,APP被杀死的情况下,推送到达率很不理想,但APP启动时会主动拉取未接收的推送信息).
//    // 接入华为厂商
//    implementation 'com.huawei.hms:push:6.5.0.300'
//    implementation 'cn.jiguang.sdk.plugin:huawei:5.2.0'
//    // 接入 FCM 厂商
//    implementation 'com.google.firebase:firebase-messaging:23.0.5'
//    implementation 'cn.jiguang.sdk.plugin:fcm:5.2.0'
//    // 接入魅族厂商
//    implementation 'cn.jiguang.sdk.plugin:meizu:5.2.0'
//    // 接入 VIVO 厂商
//    implementation 'cn.jiguang.sdk.plugin:vivo:5.2.0'
//    // 接入小米厂商
//    implementation 'cn.jiguang.sdk.plugin:xiaomi:5.2.0'
//    // 接入 OPPO 厂商
//    implementation 'cn.jiguang.sdk.plugin:oppo:5.2.0'
//    // JPush Android SDK v4.6.0 开始，需要单独引入 oppo 厂商 aar ，请下载官网 SDK 包并把 jpush-android-xxx-release/third-push/oppo/libs 下的 aar 文件单独拷贝一份到应用 module/libs 下
//    implementation(name: 'com.heytap.msp-push-3.1.0', ext: 'aar')
//    //以下为 OPPO 3.1.0 aar需要依赖
//    implementation 'com.google.code.gson:gson:2.6.2'
//    implementation 'commons-codec:commons-codec:1.6'
//    implementation 'androidx.annotation:annotation:1.1.0'
//    // 接入荣耀厂商
//    implementation 'cn.jiguang.sdk.plugin:honor:5.2.0'
//    //需要单独引入荣耀厂商 aar ，请下载官网 SDK 包并把 jpush-android-xxx-release/third-push/honor/libs 下的 aar 文件单独拷贝一份到应用 module/libs 下
//    implementation(name: 'HiPushSdk-v7.0.1.103', ext: 'aar')

    //网络请求框架:okhttp.
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    //网络请求框架:retrofit(内置okhttp,但可能有点旧).
    implementation 'com.squareup.retrofit2:retrofit:2.11.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.11.0'

    implementation("org.greenrobot:eventbus:3.3.1") //EventBust.

}

//apply plugin: 'com.google.gms.google-services'//极光推送:google通道.
//apply plugin: 'com.huawei.agconnect'//极光推送:华为通道.

//设置APK输出名称.
android.applicationVariants.all { variant ->
    variant.outputs.all { output ->
//        //方式一:
//        def date = new Date().format("yyMMddHHmm", TimeZone.getTimeZone("GMT+08"))
//        if (variant.buildType.name == 'debug') {
//            output.outputFileName = "TestDemo_v${android.defaultConfig.versionName}_${date}_debug.apk"
//        } else if (variant.buildType.name == 'release') {
//            output.outputFileName = "TestDemo_v${android.defaultConfig.versionName}_${date}_release.apk"
//        }
        //方式二:
        output.outputFileName = "TestDemo_${rootProject.ext.version_code}_v${rootProject.ext.version_name}.apk"
    }
}