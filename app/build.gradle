plugins {
    id 'com.android.application'
    id 'com.jakewharton.butterknife'

    id 'kotlin-android'
    id 'kotlin-android-extensions'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.wcl.testdemo"
        minSdk 21
        targetSdk 32
        versionName rootProject.ext.version_name
        versionCode rootProject.ext.version_code

//        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        //[Native:关注点一]
        externalNativeBuild {
            cmake {
                cppFlags ""
                // 通过Rebuild后会在app > build > intermediates > cmake > debug > obj目录下会生成不同CPU架构对应的so文件.
                // ndk（v17及以上）:only Supported ABIs are [armeabi-v7a, arm64-v8a, x86, x86_64]. 不填abiFilters默认cmake生成前面四种架构种类的so.
                // 注意abiFilter和abiFilters的区别.
                abiFilters 'armeabi-v7a' //"x86", "x86_64", 'arm64-v8a'
                //arguments "-DANDROID_PLATFORM=24","-DANDROID_TOOLCHAIN=clang" /可以修改cmake的"build_command.txt"编译命令的参数.
                arguments "-DANDROID_STL=c++_shared"//OpenCV需要用到c++_shared.so,本地没有,声明远程下载一个.
            }
        }

        //[Native:关注点二]
        ndk {
            // 在可运行项目的build.gradle中的android->defaultConfig->ndk下:
            // 设置abiFilters表示支持的SO库架构种类,限制了cmake生成so架构种类的上限,也决定了APK中lib文件夹下so架构种类的上限.
            // 注意abiFilter和abiFilters的区别.
            abiFilters 'armeabi-v7a' //'armeabi', 'x86', 'armeabi-v7a', 'arm64-v8a', 'x86_64', 'arm64-v8a', "mips", "mips64"
        }

    }

    //[Native:关注点三]
    externalNativeBuild {//有此项表示Native(C/C++)工程,编译会慢很多(不调试Native时可注释此项和调用处).无此项表示Java工程.
        cmake {
            path "src/main/cpp/CMakeLists.txt" //指定CMakeLists.txt文件源路径(相对本gradle文件的路径).
            version "3.10.2"
        }
    }

    //[Native:关注点四]
    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/cpp/libs'] //指定native层中需要用到的三方so路径(相对本gradle文件的路径),以供引入apk.
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.4.0'
//    testImplementation 'junit:junit:4.13.2'
//    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'//约束布局.
    implementation 'com.jakewharton:butterknife:10.2.3'//黄油刀(8.4.0以上版本,该库会使用androidx.如果我的其他库使用support,会冲突使得项目无法build).
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.3'//黄油刀.

    implementation 'com.blankj:utilcodex:1.31.0'//布兰柯基-工具类(如果用了AndroidX,引入utilcodex否则引入utilcode)
    implementation 'org.java-websocket:Java-WebSocket:1.5.3'//WebSocket.

    implementation "androidx.camera:camera-core:1.0.0-alpha05"
    implementation "androidx.camera:camera-camera2:1.0.0-alpha05"
}